{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianselling/Developer/JobApplications/mr-dashboard/src/context/SidebarContext.js\";\nimport React, { useState, useMemo } from 'react'; // create context\n\nexport const SidebarContext = React.createContext();\nexport const SidebarProvider = ({\n  children\n}) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen);\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false);\n  }\n\n  const value = useMemo(() => ({\n    isSidebarOpen,\n    toggleSidebar,\n    closeSidebar\n  }), [isSidebarOpen, toggleSidebar]);\n  return /*#__PURE__*/React.createElement(SidebarContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/sebastianselling/Developer/JobApplications/mr-dashboard/src/context/SidebarContext.js"],"names":["React","useState","useMemo","SidebarContext","createContext","SidebarProvider","children","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAGH,KAAK,CAACI,aAAN,EAAvB;AAEP,OAAO,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAChD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,KAAD,CAAlD;;AAEA,WAASQ,aAAT,GAAyB;AACxBD,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACA;;AAED,WAASG,YAAT,GAAwB;AACvBF,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA;;AAED,QAAMG,KAAK,GAAGT,OAAO,CACpB,OAAO;AACNK,IAAAA,aADM;AAENE,IAAAA,aAFM;AAGNC,IAAAA;AAHM,GAAP,CADoB,EAMpB,CAACH,aAAD,EAAgBE,aAAhB,CANoB,CAArB;AASA,sBACC,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEE,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCL,QAAxC,CADD;AAGA,CAvBM","sourcesContent":["import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n\tconst [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n\tfunction toggleSidebar() {\n\t\tsetIsSidebarOpen(!isSidebarOpen)\n\t}\n\n\tfunction closeSidebar() {\n\t\tsetIsSidebarOpen(false)\n\t}\n\n\tconst value = useMemo(\n\t\t() => ({\n\t\t\tisSidebarOpen,\n\t\t\ttoggleSidebar,\n\t\t\tcloseSidebar,\n\t\t}),\n\t\t[isSidebarOpen, toggleSidebar]\n\t)\n\n\treturn (\n\t\t<SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}